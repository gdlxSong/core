// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlacementClient is the client API for Placement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlacementClient interface {
	Register(ctx context.Context, in *RegisterStatemReq, opts ...grpc.CallOption) (*RegisterStatemResp, error)
	RepotStatus(ctx context.Context, opts ...grpc.CallOption) (Placement_RepotStatusClient, error)
}

type placementClient struct {
	cc grpc.ClientConnInterface
}

func NewPlacementClient(cc grpc.ClientConnInterface) PlacementClient {
	return &placementClient{cc}
}

func (c *placementClient) Register(ctx context.Context, in *RegisterStatemReq, opts ...grpc.CallOption) (*RegisterStatemResp, error) {
	out := new(RegisterStatemResp)
	err := c.cc.Invoke(ctx, "/proto.Placement/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placementClient) RepotStatus(ctx context.Context, opts ...grpc.CallOption) (Placement_RepotStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Placement_ServiceDesc.Streams[0], "/proto.Placement/RepotStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &placementRepotStatusClient{stream}
	return x, nil
}

type Placement_RepotStatusClient interface {
	Send(*ReportStatusReq) error
	Recv() (*ReportStatusResp, error)
	grpc.ClientStream
}

type placementRepotStatusClient struct {
	grpc.ClientStream
}

func (x *placementRepotStatusClient) Send(m *ReportStatusReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *placementRepotStatusClient) Recv() (*ReportStatusResp, error) {
	m := new(ReportStatusResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlacementServer is the server API for Placement service.
// All implementations must embed UnimplementedPlacementServer
// for forward compatibility
type PlacementServer interface {
	Register(context.Context, *RegisterStatemReq) (*RegisterStatemResp, error)
	RepotStatus(Placement_RepotStatusServer) error
	mustEmbedUnimplementedPlacementServer()
}

// UnimplementedPlacementServer must be embedded to have forward compatible implementations.
type UnimplementedPlacementServer struct {
}

func (UnimplementedPlacementServer) Register(context.Context, *RegisterStatemReq) (*RegisterStatemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPlacementServer) RepotStatus(Placement_RepotStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method RepotStatus not implemented")
}
func (UnimplementedPlacementServer) mustEmbedUnimplementedPlacementServer() {}

// UnsafePlacementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlacementServer will
// result in compilation errors.
type UnsafePlacementServer interface {
	mustEmbedUnimplementedPlacementServer()
}

func RegisterPlacementServer(s grpc.ServiceRegistrar, srv PlacementServer) {
	s.RegisterService(&Placement_ServiceDesc, srv)
}

func _Placement_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStatemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacementServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Placement/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacementServer).Register(ctx, req.(*RegisterStatemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Placement_RepotStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlacementServer).RepotStatus(&placementRepotStatusServer{stream})
}

type Placement_RepotStatusServer interface {
	Send(*ReportStatusResp) error
	Recv() (*ReportStatusReq, error)
	grpc.ServerStream
}

type placementRepotStatusServer struct {
	grpc.ServerStream
}

func (x *placementRepotStatusServer) Send(m *ReportStatusResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *placementRepotStatusServer) Recv() (*ReportStatusReq, error) {
	m := new(ReportStatusReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Placement_ServiceDesc is the grpc.ServiceDesc for Placement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Placement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Placement",
	HandlerType: (*PlacementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Placement_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RepotStatus",
			Handler:       _Placement_RepotStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/placement.proto",
}

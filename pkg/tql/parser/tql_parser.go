// AUTOGENERATED FILE

//go:build !codeanalysis
// +build !codeanalysis

// Generated from TQL.g4 by ANTLR 4.7.

package parser // TQL

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 53, 114,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 7, 3,
	37, 10, 3, 12, 3, 14, 3, 40, 11, 3, 3, 4, 3, 4, 3, 4, 5, 4, 45, 10, 4,
	3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 5, 6, 52, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 63, 10, 6, 12, 6, 14, 6, 66, 11, 6,
	3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 6, 10, 78,
	10, 10, 13, 10, 14, 10, 79, 5, 10, 82, 10, 10, 3, 11, 3, 11, 3, 11, 7,
	11, 87, 10, 11, 12, 11, 14, 11, 90, 11, 11, 3, 12, 3, 12, 3, 12, 3, 13,
	3, 13, 3, 13, 5, 13, 98, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 7, 13, 109, 10, 13, 12, 13, 14, 13, 112, 11, 13,
	3, 13, 2, 4, 10, 24, 14, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 2,
	6, 3, 2, 37, 39, 3, 2, 40, 41, 4, 2, 12, 12, 14, 18, 3, 2, 37, 38, 2, 114,
	2, 26, 3, 2, 2, 2, 4, 33, 3, 2, 2, 2, 6, 41, 3, 2, 2, 2, 8, 46, 3, 2, 2,
	2, 10, 51, 3, 2, 2, 2, 12, 67, 3, 2, 2, 2, 14, 69, 3, 2, 2, 2, 16, 72,
	3, 2, 2, 2, 18, 81, 3, 2, 2, 2, 20, 83, 3, 2, 2, 2, 22, 91, 3, 2, 2, 2,
	24, 97, 3, 2, 2, 2, 26, 27, 7, 5, 2, 2, 27, 28, 7, 6, 2, 2, 28, 29, 5,
	8, 5, 2, 29, 30, 7, 22, 2, 2, 30, 31, 5, 4, 3, 2, 31, 32, 7, 2, 2, 3, 32,
	3, 3, 2, 2, 2, 33, 38, 5, 6, 4, 2, 34, 35, 7, 3, 2, 2, 35, 37, 5, 6, 4,
	2, 36, 34, 3, 2, 2, 2, 37, 40, 3, 2, 2, 2, 38, 36, 3, 2, 2, 2, 38, 39,
	3, 2, 2, 2, 39, 5, 3, 2, 2, 2, 40, 38, 3, 2, 2, 2, 41, 44, 5, 10, 6, 2,
	42, 43, 7, 7, 2, 2, 43, 45, 5, 20, 11, 2, 44, 42, 3, 2, 2, 2, 44, 45, 3,
	2, 2, 2, 45, 7, 3, 2, 2, 2, 46, 47, 7, 45, 2, 2, 47, 9, 3, 2, 2, 2, 48,
	49, 8, 6, 1, 2, 49, 52, 5, 12, 7, 2, 50, 52, 5, 14, 8, 2, 51, 48, 3, 2,
	2, 2, 51, 50, 3, 2, 2, 2, 52, 64, 3, 2, 2, 2, 53, 54, 12, 6, 2, 2, 54,
	55, 9, 2, 2, 2, 55, 63, 5, 10, 6, 7, 56, 57, 12, 5, 2, 2, 57, 58, 9, 3,
	2, 2, 58, 63, 5, 10, 6, 6, 59, 60, 12, 4, 2, 2, 60, 61, 9, 4, 2, 2, 61,
	63, 5, 10, 6, 5, 62, 53, 3, 2, 2, 2, 62, 56, 3, 2, 2, 2, 62, 59, 3, 2,
	2, 2, 63, 66, 3, 2, 2, 2, 64, 62, 3, 2, 2, 2, 64, 65, 3, 2, 2, 2, 65, 11,
	3, 2, 2, 2, 66, 64, 3, 2, 2, 2, 67, 68, 7, 52, 2, 2, 68, 13, 3, 2, 2, 2,
	69, 70, 5, 16, 9, 2, 70, 71, 5, 18, 10, 2, 71, 15, 3, 2, 2, 2, 72, 73,
	7, 45, 2, 2, 73, 17, 3, 2, 2, 2, 74, 82, 7, 4, 2, 2, 75, 76, 7, 42, 2,
	2, 76, 78, 7, 45, 2, 2, 77, 75, 3, 2, 2, 2, 78, 79, 3, 2, 2, 2, 79, 77,
	3, 2, 2, 2, 79, 80, 3, 2, 2, 2, 80, 82, 3, 2, 2, 2, 81, 74, 3, 2, 2, 2,
	81, 77, 3, 2, 2, 2, 82, 19, 3, 2, 2, 2, 83, 88, 7, 45, 2, 2, 84, 85, 7,
	42, 2, 2, 85, 87, 7, 45, 2, 2, 86, 84, 3, 2, 2, 2, 87, 90, 3, 2, 2, 2,
	88, 86, 3, 2, 2, 2, 88, 89, 3, 2, 2, 2, 89, 21, 3, 2, 2, 2, 90, 88, 3,
	2, 2, 2, 91, 92, 5, 24, 13, 2, 92, 93, 7, 2, 2, 3, 93, 23, 3, 2, 2, 2,
	94, 95, 8, 13, 1, 2, 95, 98, 7, 49, 2, 2, 96, 98, 7, 52, 2, 2, 97, 94,
	3, 2, 2, 2, 97, 96, 3, 2, 2, 2, 98, 110, 3, 2, 2, 2, 99, 100, 12, 7, 2,
	2, 100, 101, 9, 5, 2, 2, 101, 109, 5, 24, 13, 8, 102, 103, 12, 6, 2, 2,
	103, 104, 9, 3, 2, 2, 104, 109, 5, 24, 13, 7, 105, 106, 12, 5, 2, 2, 106,
	107, 9, 4, 2, 2, 107, 109, 5, 24, 13, 6, 108, 99, 3, 2, 2, 2, 108, 102,
	3, 2, 2, 2, 108, 105, 3, 2, 2, 2, 109, 112, 3, 2, 2, 2, 110, 108, 3, 2,
	2, 2, 110, 111, 3, 2, 2, 2, 111, 25, 3, 2, 2, 2, 112, 110, 3, 2, 2, 2,
	13, 38, 44, 51, 62, 64, 79, 81, 88, 97, 108, 110,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "','", "'.*'", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "'*'", "'/'", "'%'", "'+'", "'-'", "'.'",
}
var symbolicNames = []string{
	"", "", "", "INSERT", "INTO", "AS", "AND", "CASE", "ELSE", "END", "EQ",
	"FROM", "GT", "GTE", "LT", "LTE", "NE", "NOT", "NULL", "OR", "SELECT",
	"THEN", "WHERE", "WHEN", "GROUP", "BY", "TUMBLINGWINDOW", "HOPPINGWINDOW",
	"SLIDINGWINDOW", "SESSIONWINDOW", "DD", "HH", "MI", "SS", "MS", "MUL",
	"DIV", "MOD", "ADD", "SUB", "DOT", "TRUE", "FALSE", "INDENTIFIER", "ENTITYNAME",
	"PROPERTYNAME", "TARGETENTITY", "NUMBER", "INTEGER", "FLOAT", "STRING",
	"WHITESPACE",
}

var ruleNames = []string{
	"root", "fields", "field", "targetEntity", "expr", "constant", "source",
	"sourceEntity", "propertyEntity", "targetProperty", "computing", "numExp",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type TQLParser struct {
	*antlr.BaseParser
}

func NewTQLParser(input antlr.TokenStream) *TQLParser {
	this := new(TQLParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "TQL.g4"

	return this
}

// TQLParser tokens.
const (
	TQLParserEOF            = antlr.TokenEOF
	TQLParserT__0           = 1
	TQLParserT__1           = 2
	TQLParserINSERT         = 3
	TQLParserINTO           = 4
	TQLParserAS             = 5
	TQLParserAND            = 6
	TQLParserCASE           = 7
	TQLParserELSE           = 8
	TQLParserEND            = 9
	TQLParserEQ             = 10
	TQLParserFROM           = 11
	TQLParserGT             = 12
	TQLParserGTE            = 13
	TQLParserLT             = 14
	TQLParserLTE            = 15
	TQLParserNE             = 16
	TQLParserNOT            = 17
	TQLParserNULL           = 18
	TQLParserOR             = 19
	TQLParserSELECT         = 20
	TQLParserTHEN           = 21
	TQLParserWHERE          = 22
	TQLParserWHEN           = 23
	TQLParserGROUP          = 24
	TQLParserBY             = 25
	TQLParserTUMBLINGWINDOW = 26
	TQLParserHOPPINGWINDOW  = 27
	TQLParserSLIDINGWINDOW  = 28
	TQLParserSESSIONWINDOW  = 29
	TQLParserDD             = 30
	TQLParserHH             = 31
	TQLParserMI             = 32
	TQLParserSS             = 33
	TQLParserMS             = 34
	TQLParserMUL            = 35
	TQLParserDIV            = 36
	TQLParserMOD            = 37
	TQLParserADD            = 38
	TQLParserSUB            = 39
	TQLParserDOT            = 40
	TQLParserTRUE           = 41
	TQLParserFALSE          = 42
	TQLParserINDENTIFIER    = 43
	TQLParserENTITYNAME     = 44
	TQLParserPROPERTYNAME   = 45
	TQLParserTARGETENTITY   = 46
	TQLParserNUMBER         = 47
	TQLParserINTEGER        = 48
	TQLParserFLOAT          = 49
	TQLParserSTRING         = 50
	TQLParserWHITESPACE     = 51
)

// TQLParser rules.
const (
	TQLParserRULE_root           = 0
	TQLParserRULE_fields         = 1
	TQLParserRULE_field          = 2
	TQLParserRULE_targetEntity   = 3
	TQLParserRULE_expr           = 4
	TQLParserRULE_constant       = 5
	TQLParserRULE_source         = 6
	TQLParserRULE_sourceEntity   = 7
	TQLParserRULE_propertyEntity = 8
	TQLParserRULE_targetProperty = 9
	TQLParserRULE_computing      = 10
	TQLParserRULE_numExp         = 11
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_root
	return p
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) INSERT() antlr.TerminalNode {
	return s.GetToken(TQLParserINSERT, 0)
}

func (s *RootContext) INTO() antlr.TerminalNode {
	return s.GetToken(TQLParserINTO, 0)
}

func (s *RootContext) TargetEntity() ITargetEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITargetEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITargetEntityContext)
}

func (s *RootContext) SELECT() antlr.TerminalNode {
	return s.GetToken(TQLParserSELECT, 0)
}

func (s *RootContext) Fields() IFieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsContext)
}

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(TQLParserEOF, 0)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (p *TQLParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, TQLParserRULE_root)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(24)
		p.Match(TQLParserINSERT)
	}
	{
		p.SetState(25)
		p.Match(TQLParserINTO)
	}
	{
		p.SetState(26)
		p.TargetEntity()
	}
	{
		p.SetState(27)
		p.Match(TQLParserSELECT)
	}
	{
		p.SetState(28)
		p.Fields()
	}
	{
		p.SetState(29)
		p.Match(TQLParserEOF)
	}

	return localctx
}

// IFieldsContext is an interface to support dynamic dispatch.
type IFieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldsContext differentiates from other interfaces.
	IsFieldsContext()
}

type FieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldsContext() *FieldsContext {
	var p = new(FieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_fields
	return p
}

func (*FieldsContext) IsFieldsContext() {}

func NewFieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldsContext {
	var p = new(FieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_fields

	return p
}

func (s *FieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldsContext) AllField() []IFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldContext)(nil)).Elem())
	var tst = make([]IFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldContext)
		}
	}

	return tst
}

func (s *FieldsContext) Field(i int) IFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldContext)
}

func (s *FieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterFields(s)
	}
}

func (s *FieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitFields(s)
	}
}

func (p *TQLParser) Fields() (localctx IFieldsContext) {
	localctx = NewFieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, TQLParserRULE_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(31)
		p.Field()
	}
	p.SetState(36)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TQLParserT__0 {
		{
			p.SetState(32)
			p.Match(TQLParserT__0)
		}
		{
			p.SetState(33)
			p.Field()
		}

		p.SetState(38)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFieldContext is an interface to support dynamic dispatch.
type IFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldContext differentiates from other interfaces.
	IsFieldContext()
}

type FieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldContext() *FieldContext {
	var p = new(FieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_field
	return p
}

func (*FieldContext) IsFieldContext() {}

func NewFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldContext {
	var p = new(FieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_field

	return p
}

func (s *FieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FieldContext) AS() antlr.TerminalNode {
	return s.GetToken(TQLParserAS, 0)
}

func (s *FieldContext) TargetProperty() ITargetPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITargetPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITargetPropertyContext)
}

func (s *FieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterField(s)
	}
}

func (s *FieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitField(s)
	}
}

func (p *TQLParser) Field() (localctx IFieldContext) {
	localctx = NewFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, TQLParserRULE_field)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(39)
		p.expr(0)
	}
	p.SetState(42)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TQLParserAS {
		{
			p.SetState(40)
			p.Match(TQLParserAS)
		}
		{
			p.SetState(41)
			p.TargetProperty()
		}

	}

	return localctx
}

// ITargetEntityContext is an interface to support dynamic dispatch.
type ITargetEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTargetEntityContext differentiates from other interfaces.
	IsTargetEntityContext()
}

type TargetEntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTargetEntityContext() *TargetEntityContext {
	var p = new(TargetEntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_targetEntity
	return p
}

func (*TargetEntityContext) IsTargetEntityContext() {}

func NewTargetEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TargetEntityContext {
	var p = new(TargetEntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_targetEntity

	return p
}

func (s *TargetEntityContext) GetParser() antlr.Parser { return s.parser }

func (s *TargetEntityContext) INDENTIFIER() antlr.TerminalNode {
	return s.GetToken(TQLParserINDENTIFIER, 0)
}

func (s *TargetEntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TargetEntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TargetEntityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterTargetEntity(s)
	}
}

func (s *TargetEntityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitTargetEntity(s)
	}
}

func (p *TQLParser) TargetEntity() (localctx ITargetEntityContext) {
	localctx = NewTargetEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, TQLParserRULE_targetEntity)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(44)
		p.Match(TQLParserINDENTIFIER)
	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyFrom(ctx *ExprContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExpressionZContext struct {
	*ExprContext
}

func NewExpressionZContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionZContext {
	var p = new(ExpressionZContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *ExpressionZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionZContext) Source() ISourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISourceContext)
}

func (s *ExpressionZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterExpressionZ(s)
	}
}

func (s *ExpressionZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitExpressionZ(s)
	}
}

type DummyAddSubContext struct {
	*ExprContext
	op antlr.Token
}

func NewDummyAddSubContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DummyAddSubContext {
	var p = new(DummyAddSubContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *DummyAddSubContext) GetOp() antlr.Token { return s.op }

func (s *DummyAddSubContext) SetOp(v antlr.Token) { s.op = v }

func (s *DummyAddSubContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DummyAddSubContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *DummyAddSubContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DummyAddSubContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterDummyAddSub(s)
	}
}

func (s *DummyAddSubContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitDummyAddSub(s)
	}
}

type DummyMulDivContext struct {
	*ExprContext
	op antlr.Token
}

func NewDummyMulDivContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DummyMulDivContext {
	var p = new(DummyMulDivContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *DummyMulDivContext) GetOp() antlr.Token { return s.op }

func (s *DummyMulDivContext) SetOp(v antlr.Token) { s.op = v }

func (s *DummyMulDivContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DummyMulDivContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *DummyMulDivContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DummyMulDivContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterDummyMulDiv(s)
	}
}

func (s *DummyMulDivContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitDummyMulDiv(s)
	}
}

type CONSTANTContext struct {
	*ExprContext
}

func NewCONSTANTContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CONSTANTContext {
	var p = new(CONSTANTContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *CONSTANTContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CONSTANTContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *CONSTANTContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterCONSTANT(s)
	}
}

func (s *CONSTANTContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitCONSTANT(s)
	}
}

type DummyCompareValueContext struct {
	*ExprContext
	op antlr.Token
}

func NewDummyCompareValueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DummyCompareValueContext {
	var p = new(DummyCompareValueContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *DummyCompareValueContext) GetOp() antlr.Token { return s.op }

func (s *DummyCompareValueContext) SetOp(v antlr.Token) { s.op = v }

func (s *DummyCompareValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DummyCompareValueContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *DummyCompareValueContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DummyCompareValueContext) EQ() antlr.TerminalNode {
	return s.GetToken(TQLParserEQ, 0)
}

func (s *DummyCompareValueContext) GT() antlr.TerminalNode {
	return s.GetToken(TQLParserGT, 0)
}

func (s *DummyCompareValueContext) LT() antlr.TerminalNode {
	return s.GetToken(TQLParserLT, 0)
}

func (s *DummyCompareValueContext) GTE() antlr.TerminalNode {
	return s.GetToken(TQLParserGTE, 0)
}

func (s *DummyCompareValueContext) LTE() antlr.TerminalNode {
	return s.GetToken(TQLParserLTE, 0)
}

func (s *DummyCompareValueContext) NE() antlr.TerminalNode {
	return s.GetToken(TQLParserNE, 0)
}

func (s *DummyCompareValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterDummyCompareValue(s)
	}
}

func (s *DummyCompareValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitDummyCompareValue(s)
	}
}

func (p *TQLParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *TQLParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 8
	p.EnterRecursionRule(localctx, 8, TQLParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(49)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TQLParserSTRING:
		localctx = NewCONSTANTContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(47)
			p.Constant()
		}

	case TQLParserINDENTIFIER:
		localctx = NewExpressionZContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(48)
			p.Source()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(62)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(60)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
			case 1:
				localctx = NewDummyMulDivContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TQLParserRULE_expr)
				p.SetState(51)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(52)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*DummyMulDivContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(TQLParserMUL-35))|(1<<(TQLParserDIV-35))|(1<<(TQLParserMOD-35)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*DummyMulDivContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(53)
					p.expr(5)
				}

			case 2:
				localctx = NewDummyAddSubContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TQLParserRULE_expr)
				p.SetState(54)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(55)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*DummyAddSubContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == TQLParserADD || _la == TQLParserSUB) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*DummyAddSubContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(56)
					p.expr(4)
				}

			case 3:
				localctx = NewDummyCompareValueContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TQLParserRULE_expr)
				p.SetState(57)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				p.SetState(58)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*DummyCompareValueContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TQLParserEQ)|(1<<TQLParserGT)|(1<<TQLParserGTE)|(1<<TQLParserLT)|(1<<TQLParserLTE)|(1<<TQLParserNE))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*DummyCompareValueContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(59)
					p.expr(3)
				}

			}

		}
		p.SetState(64)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) CopyFrom(ctx *ConstantContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SStringContext struct {
	*ConstantContext
}

func NewSStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SStringContext {
	var p = new(SStringContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *SStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SStringContext) STRING() antlr.TerminalNode {
	return s.GetToken(TQLParserSTRING, 0)
}

func (s *SStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterSString(s)
	}
}

func (s *SStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitSString(s)
	}
}

func (p *TQLParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, TQLParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	localctx = NewSStringContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(65)
		p.Match(TQLParserSTRING)
	}

	return localctx
}

// ISourceContext is an interface to support dynamic dispatch.
type ISourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSourceContext differentiates from other interfaces.
	IsSourceContext()
}

type SourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceContext() *SourceContext {
	var p = new(SourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_source
	return p
}

func (*SourceContext) IsSourceContext() {}

func NewSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceContext {
	var p = new(SourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_source

	return p
}

func (s *SourceContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceContext) SourceEntity() ISourceEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISourceEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISourceEntityContext)
}

func (s *SourceContext) PropertyEntity() IPropertyEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyEntityContext)
}

func (s *SourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterSource(s)
	}
}

func (s *SourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitSource(s)
	}
}

func (p *TQLParser) Source() (localctx ISourceContext) {
	localctx = NewSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, TQLParserRULE_source)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(67)
		p.SourceEntity()
	}
	{
		p.SetState(68)
		p.PropertyEntity()
	}

	return localctx
}

// ISourceEntityContext is an interface to support dynamic dispatch.
type ISourceEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSourceEntityContext differentiates from other interfaces.
	IsSourceEntityContext()
}

type SourceEntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceEntityContext() *SourceEntityContext {
	var p = new(SourceEntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_sourceEntity
	return p
}

func (*SourceEntityContext) IsSourceEntityContext() {}

func NewSourceEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceEntityContext {
	var p = new(SourceEntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_sourceEntity

	return p
}

func (s *SourceEntityContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceEntityContext) INDENTIFIER() antlr.TerminalNode {
	return s.GetToken(TQLParserINDENTIFIER, 0)
}

func (s *SourceEntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceEntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceEntityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterSourceEntity(s)
	}
}

func (s *SourceEntityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitSourceEntity(s)
	}
}

func (p *TQLParser) SourceEntity() (localctx ISourceEntityContext) {
	localctx = NewSourceEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, TQLParserRULE_sourceEntity)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(70)
		p.Match(TQLParserINDENTIFIER)
	}

	return localctx
}

// IPropertyEntityContext is an interface to support dynamic dispatch.
type IPropertyEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyEntityContext differentiates from other interfaces.
	IsPropertyEntityContext()
}

type PropertyEntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyEntityContext() *PropertyEntityContext {
	var p = new(PropertyEntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_propertyEntity
	return p
}

func (*PropertyEntityContext) IsPropertyEntityContext() {}

func NewPropertyEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyEntityContext {
	var p = new(PropertyEntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_propertyEntity

	return p
}

func (s *PropertyEntityContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyEntityContext) AllINDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(TQLParserINDENTIFIER)
}

func (s *PropertyEntityContext) INDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(TQLParserINDENTIFIER, i)
}

func (s *PropertyEntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyEntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyEntityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterPropertyEntity(s)
	}
}

func (s *PropertyEntityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitPropertyEntity(s)
	}
}

func (p *TQLParser) PropertyEntity() (localctx IPropertyEntityContext) {
	localctx = NewPropertyEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, TQLParserRULE_propertyEntity)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(79)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TQLParserT__1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(72)
			p.Match(TQLParserT__1)
		}

	case TQLParserDOT:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(75)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(73)
					p.Match(TQLParserDOT)
				}
				{
					p.SetState(74)
					p.Match(TQLParserINDENTIFIER)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(77)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITargetPropertyContext is an interface to support dynamic dispatch.
type ITargetPropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTargetPropertyContext differentiates from other interfaces.
	IsTargetPropertyContext()
}

type TargetPropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTargetPropertyContext() *TargetPropertyContext {
	var p = new(TargetPropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_targetProperty
	return p
}

func (*TargetPropertyContext) IsTargetPropertyContext() {}

func NewTargetPropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TargetPropertyContext {
	var p = new(TargetPropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_targetProperty

	return p
}

func (s *TargetPropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *TargetPropertyContext) AllINDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(TQLParserINDENTIFIER)
}

func (s *TargetPropertyContext) INDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(TQLParserINDENTIFIER, i)
}

func (s *TargetPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TargetPropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TargetPropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterTargetProperty(s)
	}
}

func (s *TargetPropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitTargetProperty(s)
	}
}

func (p *TQLParser) TargetProperty() (localctx ITargetPropertyContext) {
	localctx = NewTargetPropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, TQLParserRULE_targetProperty)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(81)
		p.Match(TQLParserINDENTIFIER)
	}
	p.SetState(86)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TQLParserDOT {
		{
			p.SetState(82)
			p.Match(TQLParserDOT)
		}
		{
			p.SetState(83)
			p.Match(TQLParserINDENTIFIER)
		}

		p.SetState(88)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IComputingContext is an interface to support dynamic dispatch.
type IComputingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComputingContext differentiates from other interfaces.
	IsComputingContext()
}

type ComputingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComputingContext() *ComputingContext {
	var p = new(ComputingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_computing
	return p
}

func (*ComputingContext) IsComputingContext() {}

func NewComputingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComputingContext {
	var p = new(ComputingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_computing

	return p
}

func (s *ComputingContext) GetParser() antlr.Parser { return s.parser }

func (s *ComputingContext) NumExp() INumExpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumExpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumExpContext)
}

func (s *ComputingContext) EOF() antlr.TerminalNode {
	return s.GetToken(TQLParserEOF, 0)
}

func (s *ComputingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComputingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComputingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterComputing(s)
	}
}

func (s *ComputingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitComputing(s)
	}
}

func (p *TQLParser) Computing() (localctx IComputingContext) {
	localctx = NewComputingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, TQLParserRULE_computing)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(89)
		p.numExp(0)
	}
	{
		p.SetState(90)
		p.Match(TQLParserEOF)
	}

	return localctx
}

// INumExpContext is an interface to support dynamic dispatch.
type INumExpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumExpContext differentiates from other interfaces.
	IsNumExpContext()
}

type NumExpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumExpContext() *NumExpContext {
	var p = new(NumExpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TQLParserRULE_numExp
	return p
}

func (*NumExpContext) IsNumExpContext() {}

func NewNumExpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumExpContext {
	var p = new(NumExpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TQLParserRULE_numExp

	return p
}

func (s *NumExpContext) GetParser() antlr.Parser { return s.parser }

func (s *NumExpContext) CopyFrom(ctx *NumExpContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *NumExpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumExpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type NumberContext struct {
	*NumExpContext
}

func NewNumberContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NumberContext {
	var p = new(NumberContext)

	p.NumExpContext = NewEmptyNumExpContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumExpContext))

	return p
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(TQLParserNUMBER, 0)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitNumber(s)
	}
}

type CompareValueContext struct {
	*NumExpContext
	op antlr.Token
}

func NewCompareValueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CompareValueContext {
	var p = new(CompareValueContext)

	p.NumExpContext = NewEmptyNumExpContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumExpContext))

	return p
}

func (s *CompareValueContext) GetOp() antlr.Token { return s.op }

func (s *CompareValueContext) SetOp(v antlr.Token) { s.op = v }

func (s *CompareValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompareValueContext) AllNumExp() []INumExpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INumExpContext)(nil)).Elem())
	var tst = make([]INumExpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INumExpContext)
		}
	}

	return tst
}

func (s *CompareValueContext) NumExp(i int) INumExpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumExpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INumExpContext)
}

func (s *CompareValueContext) EQ() antlr.TerminalNode {
	return s.GetToken(TQLParserEQ, 0)
}

func (s *CompareValueContext) GT() antlr.TerminalNode {
	return s.GetToken(TQLParserGT, 0)
}

func (s *CompareValueContext) LT() antlr.TerminalNode {
	return s.GetToken(TQLParserLT, 0)
}

func (s *CompareValueContext) GTE() antlr.TerminalNode {
	return s.GetToken(TQLParserGTE, 0)
}

func (s *CompareValueContext) LTE() antlr.TerminalNode {
	return s.GetToken(TQLParserLTE, 0)
}

func (s *CompareValueContext) NE() antlr.TerminalNode {
	return s.GetToken(TQLParserNE, 0)
}

func (s *CompareValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterCompareValue(s)
	}
}

func (s *CompareValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitCompareValue(s)
	}
}

type MulDivContext struct {
	*NumExpContext
	op antlr.Token
}

func NewMulDivContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MulDivContext {
	var p = new(MulDivContext)

	p.NumExpContext = NewEmptyNumExpContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumExpContext))

	return p
}

func (s *MulDivContext) GetOp() antlr.Token { return s.op }

func (s *MulDivContext) SetOp(v antlr.Token) { s.op = v }

func (s *MulDivContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulDivContext) AllNumExp() []INumExpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INumExpContext)(nil)).Elem())
	var tst = make([]INumExpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INumExpContext)
		}
	}

	return tst
}

func (s *MulDivContext) NumExp(i int) INumExpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumExpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INumExpContext)
}

func (s *MulDivContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterMulDiv(s)
	}
}

func (s *MulDivContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitMulDiv(s)
	}
}

type AddSubContext struct {
	*NumExpContext
	op antlr.Token
}

func NewAddSubContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddSubContext {
	var p = new(AddSubContext)

	p.NumExpContext = NewEmptyNumExpContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumExpContext))

	return p
}

func (s *AddSubContext) GetOp() antlr.Token { return s.op }

func (s *AddSubContext) SetOp(v antlr.Token) { s.op = v }

func (s *AddSubContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddSubContext) AllNumExp() []INumExpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INumExpContext)(nil)).Elem())
	var tst = make([]INumExpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INumExpContext)
		}
	}

	return tst
}

func (s *AddSubContext) NumExp(i int) INumExpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumExpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INumExpContext)
}

func (s *AddSubContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterAddSub(s)
	}
}

func (s *AddSubContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitAddSub(s)
	}
}

type StringContext struct {
	*NumExpContext
}

func NewStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringContext {
	var p = new(StringContext)

	p.NumExpContext = NewEmptyNumExpContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumExpContext))

	return p
}

func (s *StringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringContext) STRING() antlr.TerminalNode {
	return s.GetToken(TQLParserSTRING, 0)
}

func (s *StringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.EnterString(s)
	}
}

func (s *StringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TQLListener); ok {
		listenerT.ExitString(s)
	}
}

func (p *TQLParser) NumExp() (localctx INumExpContext) {
	return p.numExp(0)
}

func (p *TQLParser) numExp(_p int) (localctx INumExpContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNumExpContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INumExpContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 22
	p.EnterRecursionRule(localctx, 22, TQLParserRULE_numExp, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(95)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TQLParserNUMBER:
		localctx = NewNumberContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(93)
			p.Match(TQLParserNUMBER)
		}

	case TQLParserSTRING:
		localctx = NewStringContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(94)
			p.Match(TQLParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(108)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(106)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMulDivContext(p, NewNumExpContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TQLParserRULE_numExp)
				p.SetState(97)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(98)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*MulDivContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == TQLParserMUL || _la == TQLParserDIV) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*MulDivContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(99)
					p.numExp(6)
				}

			case 2:
				localctx = NewAddSubContext(p, NewNumExpContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TQLParserRULE_numExp)
				p.SetState(100)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(101)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AddSubContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == TQLParserADD || _la == TQLParserSUB) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AddSubContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(102)
					p.numExp(5)
				}

			case 3:
				localctx = NewCompareValueContext(p, NewNumExpContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TQLParserRULE_numExp)
				p.SetState(103)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(104)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*CompareValueContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TQLParserEQ)|(1<<TQLParserGT)|(1<<TQLParserGTE)|(1<<TQLParserLT)|(1<<TQLParserLTE)|(1<<TQLParserNE))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*CompareValueContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(105)
					p.numExp(4)
				}

			}

		}
		p.SetState(110)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext())
	}

	return localctx
}

func (p *TQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 4:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	case 11:
		var t *NumExpContext = nil
		if localctx != nil {
			t = localctx.(*NumExpContext)
		}
		return p.NumExp_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *TQLParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TQLParser) NumExp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

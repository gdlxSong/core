// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchemaClient is the client API for Schema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaClient interface {
	CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error)
}

type schemaClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaClient(cc grpc.ClientConnInterface) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error) {
	out := new(CreateSchemaResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Schema/CreateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServer is the server API for Schema service.
// All implementations must embed UnimplementedSchemaServer
// for forward compatibility
type SchemaServer interface {
	CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error)
	mustEmbedUnimplementedSchemaServer()
}

// UnimplementedSchemaServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaServer struct {
}

func (UnimplementedSchemaServer) CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedSchemaServer) mustEmbedUnimplementedSchemaServer() {}

// UnsafeSchemaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaServer will
// result in compilation errors.
type UnsafeSchemaServer interface {
	mustEmbedUnimplementedSchemaServer()
}

func RegisterSchemaServer(s grpc.ServiceRegistrar, srv SchemaServer) {
	s.RegisterService(&Schema_ServiceDesc, srv)
}

func _Schema_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Schema/CreateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).CreateSchema(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Schema_ServiceDesc is the grpc.ServiceDesc for Schema service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schema_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.core.v1.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchema",
			Handler:    _Schema_CreateSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/core/v1/schema.proto",
}

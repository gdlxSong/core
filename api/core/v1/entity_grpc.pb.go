// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntityClient is the client API for Entity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityClient interface {
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
	UpdateEntityProps(ctx context.Context, in *UpdateEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	PatchEntityProps(ctx context.Context, in *PatchEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	PatchEntityPropsZ(ctx context.Context, in *PatchEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	GetEntityProps(ctx context.Context, in *GetEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	RemoveEntityProps(ctx context.Context, in *RemoveEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	UpdateEntityConfigs(ctx context.Context, in *UpdateEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	PatchEntityConfigs(ctx context.Context, in *PatchEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	PatchEntityConfigsZ(ctx context.Context, in *PatchEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	RemoveEntityConfigs(ctx context.Context, in *RemoveEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	GetEntityConfigs(ctx context.Context, in *GetEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	AppendMapper(ctx context.Context, in *AppendMapperRequest, opts ...grpc.CallOption) (*AppendMapperResponse, error)
	GetMapper(ctx context.Context, in *GetMapperRequest, opts ...grpc.CallOption) (*GetMapperResponse, error)
	ListMapper(ctx context.Context, in *ListMapperRequest, opts ...grpc.CallOption) (*ListMapperResponse, error)
	RemoveMapper(ctx context.Context, in *RemoveMapperRequest, opts ...grpc.CallOption) (*RemoveMapperResponse, error)
	// expression.
	AppendExpression(ctx context.Context, in *AppendExpressionReq, opts ...grpc.CallOption) (*AppendExpressionResp, error)
	GetExpression(ctx context.Context, in *GetExpressionReq, opts ...grpc.CallOption) (*GetExpressionResp, error)
	ListExpression(ctx context.Context, in *ListExpressionReq, opts ...grpc.CallOption) (*ListExpressionResp, error)
	RemoveExpression(ctx context.Context, in *RemoveExpressionReq, opts ...grpc.CallOption) (*RemoveExpressionResp, error)
	ListEntity(ctx context.Context, in *ListEntityRequest, opts ...grpc.CallOption) (*ListEntityResponse, error)
}

type entityClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityClient(cc grpc.ClientConnInterface) EntityClient {
	return &entityClient{cc}
}

func (c *entityClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/UpdateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	out := new(DeleteEntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) UpdateEntityProps(ctx context.Context, in *UpdateEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/UpdateEntityProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PatchEntityProps(ctx context.Context, in *PatchEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/PatchEntityProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PatchEntityPropsZ(ctx context.Context, in *PatchEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/PatchEntityPropsZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) GetEntityProps(ctx context.Context, in *GetEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/GetEntityProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) RemoveEntityProps(ctx context.Context, in *RemoveEntityPropsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/RemoveEntityProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) UpdateEntityConfigs(ctx context.Context, in *UpdateEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/UpdateEntityConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PatchEntityConfigs(ctx context.Context, in *PatchEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/PatchEntityConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PatchEntityConfigsZ(ctx context.Context, in *PatchEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/PatchEntityConfigsZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) RemoveEntityConfigs(ctx context.Context, in *RemoveEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/RemoveEntityConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) GetEntityConfigs(ctx context.Context, in *GetEntityConfigsRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/GetEntityConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) AppendMapper(ctx context.Context, in *AppendMapperRequest, opts ...grpc.CallOption) (*AppendMapperResponse, error) {
	out := new(AppendMapperResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/AppendMapper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) GetMapper(ctx context.Context, in *GetMapperRequest, opts ...grpc.CallOption) (*GetMapperResponse, error) {
	out := new(GetMapperResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/GetMapper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ListMapper(ctx context.Context, in *ListMapperRequest, opts ...grpc.CallOption) (*ListMapperResponse, error) {
	out := new(ListMapperResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/ListMapper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) RemoveMapper(ctx context.Context, in *RemoveMapperRequest, opts ...grpc.CallOption) (*RemoveMapperResponse, error) {
	out := new(RemoveMapperResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/RemoveMapper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) AppendExpression(ctx context.Context, in *AppendExpressionReq, opts ...grpc.CallOption) (*AppendExpressionResp, error) {
	out := new(AppendExpressionResp)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/AppendExpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) GetExpression(ctx context.Context, in *GetExpressionReq, opts ...grpc.CallOption) (*GetExpressionResp, error) {
	out := new(GetExpressionResp)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/GetExpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ListExpression(ctx context.Context, in *ListExpressionReq, opts ...grpc.CallOption) (*ListExpressionResp, error) {
	out := new(ListExpressionResp)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/ListExpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) RemoveExpression(ctx context.Context, in *RemoveExpressionReq, opts ...grpc.CallOption) (*RemoveExpressionResp, error) {
	out := new(RemoveExpressionResp)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/RemoveExpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ListEntity(ctx context.Context, in *ListEntityRequest, opts ...grpc.CallOption) (*ListEntityResponse, error) {
	out := new(ListEntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/ListEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServer is the server API for Entity service.
// All implementations must embed UnimplementedEntityServer
// for forward compatibility
type EntityServer interface {
	CreateEntity(context.Context, *CreateEntityRequest) (*EntityResponse, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*EntityResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*EntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
	UpdateEntityProps(context.Context, *UpdateEntityPropsRequest) (*EntityResponse, error)
	PatchEntityProps(context.Context, *PatchEntityPropsRequest) (*EntityResponse, error)
	PatchEntityPropsZ(context.Context, *PatchEntityPropsRequest) (*EntityResponse, error)
	GetEntityProps(context.Context, *GetEntityPropsRequest) (*EntityResponse, error)
	RemoveEntityProps(context.Context, *RemoveEntityPropsRequest) (*EntityResponse, error)
	UpdateEntityConfigs(context.Context, *UpdateEntityConfigsRequest) (*EntityResponse, error)
	PatchEntityConfigs(context.Context, *PatchEntityConfigsRequest) (*EntityResponse, error)
	PatchEntityConfigsZ(context.Context, *PatchEntityConfigsRequest) (*EntityResponse, error)
	RemoveEntityConfigs(context.Context, *RemoveEntityConfigsRequest) (*EntityResponse, error)
	GetEntityConfigs(context.Context, *GetEntityConfigsRequest) (*EntityResponse, error)
	AppendMapper(context.Context, *AppendMapperRequest) (*AppendMapperResponse, error)
	GetMapper(context.Context, *GetMapperRequest) (*GetMapperResponse, error)
	ListMapper(context.Context, *ListMapperRequest) (*ListMapperResponse, error)
	RemoveMapper(context.Context, *RemoveMapperRequest) (*RemoveMapperResponse, error)
	// expression.
	AppendExpression(context.Context, *AppendExpressionReq) (*AppendExpressionResp, error)
	GetExpression(context.Context, *GetExpressionReq) (*GetExpressionResp, error)
	ListExpression(context.Context, *ListExpressionReq) (*ListExpressionResp, error)
	RemoveExpression(context.Context, *RemoveExpressionReq) (*RemoveExpressionResp, error)
	ListEntity(context.Context, *ListEntityRequest) (*ListEntityResponse, error)
	mustEmbedUnimplementedEntityServer()
}

// UnimplementedEntityServer must be embedded to have forward compatible implementations.
type UnimplementedEntityServer struct {
}

func (UnimplementedEntityServer) CreateEntity(context.Context, *CreateEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedEntityServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedEntityServer) GetEntity(context.Context, *GetEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedEntityServer) UpdateEntityProps(context.Context, *UpdateEntityPropsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityProps not implemented")
}
func (UnimplementedEntityServer) PatchEntityProps(context.Context, *PatchEntityPropsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntityProps not implemented")
}
func (UnimplementedEntityServer) PatchEntityPropsZ(context.Context, *PatchEntityPropsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntityPropsZ not implemented")
}
func (UnimplementedEntityServer) GetEntityProps(context.Context, *GetEntityPropsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityProps not implemented")
}
func (UnimplementedEntityServer) RemoveEntityProps(context.Context, *RemoveEntityPropsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityProps not implemented")
}
func (UnimplementedEntityServer) UpdateEntityConfigs(context.Context, *UpdateEntityConfigsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityConfigs not implemented")
}
func (UnimplementedEntityServer) PatchEntityConfigs(context.Context, *PatchEntityConfigsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntityConfigs not implemented")
}
func (UnimplementedEntityServer) PatchEntityConfigsZ(context.Context, *PatchEntityConfigsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntityConfigsZ not implemented")
}
func (UnimplementedEntityServer) RemoveEntityConfigs(context.Context, *RemoveEntityConfigsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityConfigs not implemented")
}
func (UnimplementedEntityServer) GetEntityConfigs(context.Context, *GetEntityConfigsRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityConfigs not implemented")
}
func (UnimplementedEntityServer) AppendMapper(context.Context, *AppendMapperRequest) (*AppendMapperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendMapper not implemented")
}
func (UnimplementedEntityServer) GetMapper(context.Context, *GetMapperRequest) (*GetMapperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapper not implemented")
}
func (UnimplementedEntityServer) ListMapper(context.Context, *ListMapperRequest) (*ListMapperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMapper not implemented")
}
func (UnimplementedEntityServer) RemoveMapper(context.Context, *RemoveMapperRequest) (*RemoveMapperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMapper not implemented")
}
func (UnimplementedEntityServer) AppendExpression(context.Context, *AppendExpressionReq) (*AppendExpressionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendExpression not implemented")
}
func (UnimplementedEntityServer) GetExpression(context.Context, *GetExpressionReq) (*GetExpressionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpression not implemented")
}
func (UnimplementedEntityServer) ListExpression(context.Context, *ListExpressionReq) (*ListExpressionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExpression not implemented")
}
func (UnimplementedEntityServer) RemoveExpression(context.Context, *RemoveExpressionReq) (*RemoveExpressionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveExpression not implemented")
}
func (UnimplementedEntityServer) ListEntity(context.Context, *ListEntityRequest) (*ListEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntity not implemented")
}
func (UnimplementedEntityServer) mustEmbedUnimplementedEntityServer() {}

// UnsafeEntityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServer will
// result in compilation errors.
type UnsafeEntityServer interface {
	mustEmbedUnimplementedEntityServer()
}

func RegisterEntityServer(s grpc.ServiceRegistrar, srv EntityServer) {
	s.RegisterService(&Entity_ServiceDesc, srv)
}

func _Entity_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/UpdateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_UpdateEntityProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).UpdateEntityProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/UpdateEntityProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).UpdateEntityProps(ctx, req.(*UpdateEntityPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PatchEntityProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PatchEntityProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/PatchEntityProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PatchEntityProps(ctx, req.(*PatchEntityPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PatchEntityPropsZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PatchEntityPropsZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/PatchEntityPropsZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PatchEntityPropsZ(ctx, req.(*PatchEntityPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_GetEntityProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).GetEntityProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/GetEntityProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).GetEntityProps(ctx, req.(*GetEntityPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_RemoveEntityProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).RemoveEntityProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/RemoveEntityProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).RemoveEntityProps(ctx, req.(*RemoveEntityPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_UpdateEntityConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).UpdateEntityConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/UpdateEntityConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).UpdateEntityConfigs(ctx, req.(*UpdateEntityConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PatchEntityConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PatchEntityConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/PatchEntityConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PatchEntityConfigs(ctx, req.(*PatchEntityConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PatchEntityConfigsZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PatchEntityConfigsZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/PatchEntityConfigsZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PatchEntityConfigsZ(ctx, req.(*PatchEntityConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_RemoveEntityConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).RemoveEntityConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/RemoveEntityConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).RemoveEntityConfigs(ctx, req.(*RemoveEntityConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_GetEntityConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).GetEntityConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/GetEntityConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).GetEntityConfigs(ctx, req.(*GetEntityConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_AppendMapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendMapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).AppendMapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/AppendMapper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).AppendMapper(ctx, req.(*AppendMapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_GetMapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).GetMapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/GetMapper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).GetMapper(ctx, req.(*GetMapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ListMapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ListMapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/ListMapper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ListMapper(ctx, req.(*ListMapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_RemoveMapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).RemoveMapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/RemoveMapper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).RemoveMapper(ctx, req.(*RemoveMapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_AppendExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendExpressionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).AppendExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/AppendExpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).AppendExpression(ctx, req.(*AppendExpressionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_GetExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpressionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).GetExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/GetExpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).GetExpression(ctx, req.(*GetExpressionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ListExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExpressionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ListExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/ListExpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ListExpression(ctx, req.(*ListExpressionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_RemoveExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveExpressionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).RemoveExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/RemoveExpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).RemoveExpression(ctx, req.(*RemoveExpressionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ListEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ListEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/ListEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ListEntity(ctx, req.(*ListEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entity_ServiceDesc is the grpc.ServiceDesc for Entity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.core.v1.Entity",
	HandlerType: (*EntityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _Entity_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _Entity_UpdateEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Entity_GetEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Entity_DeleteEntity_Handler,
		},
		{
			MethodName: "UpdateEntityProps",
			Handler:    _Entity_UpdateEntityProps_Handler,
		},
		{
			MethodName: "PatchEntityProps",
			Handler:    _Entity_PatchEntityProps_Handler,
		},
		{
			MethodName: "PatchEntityPropsZ",
			Handler:    _Entity_PatchEntityPropsZ_Handler,
		},
		{
			MethodName: "GetEntityProps",
			Handler:    _Entity_GetEntityProps_Handler,
		},
		{
			MethodName: "RemoveEntityProps",
			Handler:    _Entity_RemoveEntityProps_Handler,
		},
		{
			MethodName: "UpdateEntityConfigs",
			Handler:    _Entity_UpdateEntityConfigs_Handler,
		},
		{
			MethodName: "PatchEntityConfigs",
			Handler:    _Entity_PatchEntityConfigs_Handler,
		},
		{
			MethodName: "PatchEntityConfigsZ",
			Handler:    _Entity_PatchEntityConfigsZ_Handler,
		},
		{
			MethodName: "RemoveEntityConfigs",
			Handler:    _Entity_RemoveEntityConfigs_Handler,
		},
		{
			MethodName: "GetEntityConfigs",
			Handler:    _Entity_GetEntityConfigs_Handler,
		},
		{
			MethodName: "AppendMapper",
			Handler:    _Entity_AppendMapper_Handler,
		},
		{
			MethodName: "GetMapper",
			Handler:    _Entity_GetMapper_Handler,
		},
		{
			MethodName: "ListMapper",
			Handler:    _Entity_ListMapper_Handler,
		},
		{
			MethodName: "RemoveMapper",
			Handler:    _Entity_RemoveMapper_Handler,
		},
		{
			MethodName: "AppendExpression",
			Handler:    _Entity_AppendExpression_Handler,
		},
		{
			MethodName: "GetExpression",
			Handler:    _Entity_GetExpression_Handler,
		},
		{
			MethodName: "ListExpression",
			Handler:    _Entity_ListExpression_Handler,
		},
		{
			MethodName: "RemoveExpression",
			Handler:    _Entity_RemoveExpression_Handler,
		},
		{
			MethodName: "ListEntity",
			Handler:    _Entity_ListEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/core/v1/entity.proto",
}
